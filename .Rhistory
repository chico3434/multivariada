#| warning: false
#| message: false
library(dplyr)
library(ggplot2)
library(corrplot)
options(scipen = 999)
options(OutDec = ",")
dados <- read.csv(file="wine.data",header=F)
data <- dados[,-1]
(p <- ncol(data))
(n <- nrow(data))
head(data)
boxplot((data),col="magenta")
boxplot(scale(data),col="blue")
summary(data)
knitr::kable(cov(data), digits = 2, caption = "Matriz de variância e covariância")
#knitr::kable(round(cor(data),2))
knitr::kable(cor(data), digits = 2, caption = "Matriz de correlação")
plot(data, col="red")
#pairs(data)
corrplot(cor(data), method = "color", addCoef.col = "black", number.cex = 0.7)
corrplot(cor(data), order = 'AOE', addCoef.col = "black", number.cex = 0.7, method = "color")
autovalores1 <- eigen(cov(data))
knitr::kable(col.names = "Autovalores",autovalores1$values)
knitr::kable(autovalores1$vectors, digits = 4, col.names = paste0("av",1:13))
autovalores2 <- eigen(cor(data))
knitr::kable(autovalores2$values, col.names = "Autovalores")
knitr::kable(autovalores2$vectors, digits = 4, col.names = paste0("av", 1:13))
cp1 <- prcomp(data)            # utiliza a matriz de covariância como default
cp <- prcomp(data,scale=TRUE)  # utiliza a matriz de correlação
op <- par(mfrow = c(1,2))
plot(cp1, col="magenta", main="Matriz de covariância")
plot(cp, col="blue", main="Matriz de correlação")
par(op)
plot(cp, type="lines", col="black", lwd = 2, main = "Screeplot - Matriz de correlação")
lines(c(1, 10), c(1, 1), col = "red", lwd = 2)
summary(cp1)
scp1 <- summary(cp1)
scp1$importance
scp1 <- summary(cp1)
knitr::kable(scp1$importance)
scp <- summary(cp)
knitr::kable(scp$importance)
install.packages("psych")
library(psych)
### Bartlett
#cortest.bartlett(cor(data))
bartlett.test(cor(data))
### Bartlett
cortest.bartlett(cor(data))
## KMO
KMO(cor(data))
#Teste de Bartlett - a hipótese nula da matriz de correlação ser uma matriz identidade, isto é, avalia se os componentes fora da diagonal principal são zero. O resultado significativo indica que existem algumas relações entre as variáveis.
bartlett.test(data)
cortest.bartlett(cor(data))
#Teste de Bartlett - a hipótese nula da matriz de correlação ser uma matriz identidade, isto é, avalia se os componentes fora da diagonal principal são zero. O resultado significativo indica que existem algumas relações entre as variáveis.
bartlett.test(data)
bartlett.test(cor(data))
bartlett.test(data)
cortest.bartlett(cor(data))
cortest.bartlett(cor(data), n = 13)
cortest.bartlett(cor(data), n = 178)
bartlett.test(data)
#bartlett.test(data)
cortest.bartlett(cor(data), n = 178)
options(scipen = 0)
cortest.bartlett(cor(data), n = 178)
cor(data)
#Teste KMO (Kaiser-Meyer-Olkin) - avalia a adequação do tamanho amostra. Varia entre 0 e 1, onde: zero indica inadequado para análise fatorial, aceitável se for maior que 0.5, recomendado acima de 0.8.
kmo = function(x)
{
x = subset(x, complete.cases(x))
r = cor(x)
r2 = r^2
i = solve(r)
d = diag(i)
p2 = (-i/sqrt(outer(d, d)))^2
diag(r2) <- diag(p2) <- 0
KMO = sum(r2)/(sum(r2)+sum(p2))
MSA = colSums(r2)/(colSums(r2)+colSums(p2))
return(list(KMO=KMO, MSA=MSA))
}
kmo(data)
# componentes principais
acpcor=prcomp(data, scale = TRUE)
summary(acpcor)
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente",ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3,col="red")
k = 2
(carfat=acpcor$rotation[, 1:k] %*% diag(acpcor$sdev[1:k]))
colnames(carfat)=paste("Fator", 1:k, sep = " ")
carfat
# rotação dos fatores
carfatr = varimax(carfat)
carfatr
# comunalidade e variância especifica
comum=rowSums(carfat^2)
vespec=diag(cor(data)) - comum
estimat=cbind(comum, vespec, diag(cor(data)))
rownames(estimat)=colnames(data)
colnames(estimat)=c("Comunalidade", "Variância única", "Variância")
estimat
# matriz de residuos
resid=cor(data) - (carfat %*% t(carfat) + diag(vespec))
resid
#| warning: false
#| message: false
library(dplyr)
library(ggplot2)
library(corrplot)
library(psych)
options(scipen = 999)
options(OutDec = ",")
knitr::kable(summary(data))
# componentes principais
acpcor <- prcomp(data, scale = TRUE)
summary(acpcor)
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
k <-  2
(carfat <- acpcor$rotation[, 1:k] %*% diag(acpcor$sdev[1:k]))
colnames(carfat) <- paste("Fator", 1:k, sep = " ")
carfat
# rotação dos fatores
carfatr = varimax(carfat)
carfatr
# comunalidade e variância especifica
comum=rowSums(carfat^2)
vespec=diag(cor(data)) - comum
estimat=cbind(comum, vespec, diag(cor(data)))
rownames(estimat)=colnames(data)
colnames(estimat)=c("Comunalidade", "Variância única", "Variância")
estimat
# matriz de residuos
resid=cor(data) - (carfat %*% t(carfat) + diag(vespec))
resid
# componentes principais
acpcor <- prcomp(data, scale = TRUE)
summary(acpcor)
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
k <-  2
(carfat <- acpcor$rotation[, 1:k] %*% diag(acpcor$sdev[1:k]))
colnames(carfat) <- paste("Fator", 1:k, sep = " ")
carfat
# rotação dos fatores
carfatr <- varimax(carfat)
carfatr
# comunalidade e variância especifica
comum <- rowSums(carfat^2)
vespec <- diag(cor(data)) - comum
estimat <- cbind(comum, vespec, diag(cor(data)))
rownames(estimat) <- colnames(data)
colnames(estimat) <- c("Comunalidade", "Variância única", "Variância")
estimat
# matriz de residuos
resid <- cor(data) - (carfat %*% t(carfat) + diag(vespec))
resid
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
lines(c(0,13), c(1,1), col = "black")
line(c(0,13), c(1,1), col = "black")
line(c(0,13), c(1,1), "black")
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
line(c(0,13), c(1,1), "black")
lines(c(0,13), c(1,1), "black")
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
lines(c(1,13), c(1,1), col = "black", lwd = 2)
acpcor <- prcomp(data, scale = TRUE)
scp <- summary(acpcor)
knitr::kable(scp$importance)
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
lines(c(1,13), c(1,1), col = "black", lwd = 2)
k <- 3
(carfat <- acpcor$rotation[, 1:k] %*% diag(acpcor$sdev[1:k]))
colnames(carfat) <- paste("Fator", 1:k, sep = " ")
carfat
# rotação dos fatores
carfatr <- varimax(carfat)
carfatr
# comunalidade e variância especifica
comum <- rowSums(carfat^2)
vespec <- diag(cor(data)) - comum
estimat <- cbind(comum, vespec, diag(cor(data)))
rownames(estimat) <- colnames(data)
colnames(estimat) <- c("Comunalidade", "Variância única", "Variância")
estimat
# matriz de residuos
resid <- cor(data) - (carfat %*% t(carfat) + diag(vespec))
resid
acpcor <- prcomp(data, scale = TRUE)
scp <- summary(acpcor)
knitr::kable(scp$importance)
plot(1:ncol(data), acpcor$sdev^2, type = "b", xlab = "Componente", ylab = "Variância", pch = 20, cex.axis = 1.3, cex.lab = 1.3, col="red")
lines(c(1,13), c(1,1), col = "black", lwd = 1)
k <- 3
(carfat <- acpcor$rotation[, 1:k] %*% diag(acpcor$sdev[1:k]))
colnames(carfat) <- paste("Fator", 1:k, sep = " ")
carfat
# rotação dos fatores
carfatr <- varimax(carfat)
carfatr
# comunalidade e variância especifica
comum <- rowSums(carfat^2)
vespec <- diag(cor(data)) - comum
estimat <- cbind(comum, vespec, diag(cor(data)))
rownames(estimat) <- colnames(data)
colnames(estimat) <- c("Comunalidade", "Variância única", "Variância")
estimat
# matriz de residuos
resid <- cor(data) - (carfat %*% t(carfat) + diag(vespec))
resid
k <- 3
(carfat <- acpcor$rotation[, 1:k] %*% diag(acpcor$sdev[1:k]))
colnames(carfat) <- paste("Fator", 1:k, sep = " ")
carfat
# rotação dos fatores
carfatr <- varimax(carfat)
carfatr
# comunalidade e variância especifica
comum <- rowSums(carfat^2)
vespec <- diag(cor(data)) - comum
estimat <- cbind(comum, vespec, diag(cor(data)))
rownames(estimat) <- colnames(data)
colnames(estimat) <- c("Comunalidade", "Variância única", "Variância")
estimat
# matriz de residuos
resid <- cor(data) - (carfat %*% t(carfat) + diag(vespec))
resid
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA)
library(ggplot2)
library(ggpubr)
library(DT)
library(mclust)
library(factoextra)
library(glue)
library(cluster)
library(fpc)
library(ape)
library(purrr)
library(mclust)
wine <- read.csv("wine.data", header = FALSE)
dados <- wine[,-1]
dados.padronizados <- scale(dados)
datatable(dados, caption = "Base de dados")
boxplot(dados)
boxplot(dados, col = "red")
boxplot((dados1),col="magenta")
boxplot((dados),col="magenta")
boxplot(scale(dados),col="blue")
summary(dados)
knitr::kable(cov(dados), digits = 2, caption = "Matriz de variância e covariância")
knitr::kable(cor(dados), digits = 2, caption = "Matriz de correlação")
plot(dados, col="red")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA)
#par(mfrow = c(1, 2));
#plot(fit, hang = 0.1,cex = 0.6);
#plot(fit, hang = -1,col="red",cex = 0.6)
#plot(fit,col="blue",cex = 0.6)
#groups <- cutree(fit, k=4) # linha de corte k
#rect.hclust(fit, k=4, border="red")# retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA)
library(ggplot2)
library(ggpubr)
library(DT)
library(mclust)
library(factoextra)
library(glue)
library(cluster)
library(fpc)
library(ape)
library(purrr)
library(mclust)
wine <- read.csv("wine.data", header = FALSE)
dados <- wine[,-1]
dados.padronizados <- scale(dados)
datatable(dados, caption = "Base de dados")
boxplot(dados,col="magenta")
boxplot(dados.padronizados,col="blue")
knitr::kable(summary(dados))
knitr::kable(cov(dados), digits = 2, caption = "Matriz de variância e covariância")
knitr::kable(cor(dados), digits = 2, caption = "Matriz de correlação")
plot(dados, col="red")
d11=dist(dados, method = "euclidean") # matriz de distancias
m=as.matrix(d11)
# print(d11)
#print(m,digits=2)
m %>% DT::datatable(caption = "Matriz de distância euclidiana")
#knitr::kable(m, caption = "Matriz de distância euclidiana")
# Visulizando as distância entre os objetos
# vermelho - perto, azul - longe, branco -
fviz_dist(d11,order=TRUE)
d1=dist(dados.padronizados, method = "euclidean")
m1=as.matrix(d1)
#print(m2,digits=2)
m1 %>% DT::datatable(caption = "Matriz de distância euclidiana - dados padronizados")
fviz_dist(d1,order=TRUE)
d2=dist(dados.padronizados, method = "manhattan")
m2=as.matrix(d2)
m2 %>% DT::datatable(caption = "Matriz de distância de Manhattan - dados padronizados")
#print(m2,digits=2)
fviz_dist(d2,order=TRUE)
d3=dist(dados.padronizados, method = "minkowski")
m3=as.matrix(d3)
m3 %>% DT::datatable(caption = "Matriz de distância de Minkowski - dados padronizados")
#print(m3,digits=2)
fviz_dist(d3,order=TRUE)
fit=hclust(d1, method="ward.D")  # method pode ser "ward.D", "ward.D2", "single", #"complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).
#names(fit)
#fit$labels[fit$order]
# agnes {cluster} - Computes agglomerative hierarchical clustering of the dataset.
#par(mfrow = c(1, 2));
#plot(fit, hang = 0.1,cex = 0.6);
#plot(fit, hang = -1,col="red",cex = 0.6)
#plot(fit,col="blue",cex = 0.6)
#groups <- cutree(fit, k=4) # linha de corte k
#rect.hclust(fit, k=4, border="red")# retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
groups <- cutree(fit, k=2) # linha de corte k
rect.hclust(fit, k=2, border="red") # retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
groups <- cutree(fit, k=3) # linha de corte k
rect.hclust(fit, k=3, border="red") # retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
groups <- cutree(fit, k=4) # linha de corte k
rect.hclust(fit, k=4, border="red") # retangulo mostrando os clusters
# Plot do dendograma na horizontal
plot(as.dendrogram(fit), edgePar=list(col=3, lwd=4), horiz=T, main="")
wss <- sapply(1:13, function(k){kmeans(dados.padronizados, centers = k)$tot.withinss})
k <- 3
modelo <- kmeans(dados.padronizados, centers = k)
fviz_nbclust(dados.padronizados, kmeans, method = "wss")+
geom_vline(xintercept = 3, linetype = 2)
wss
plot.phylo(as.phylo(fit), type="p", edge.col=4, edge.width=2,
show.node.label=TRUE, no.margin=TRUE,cex = 0.6)
#fit$labels[fit$order]
mycl=cutree(fit, k=3)
dados.agrupados <- data.frame(wine,mycl)
dados.agrupados[dados.agrupados$V1 != dados.agrupados$mycl,] %>% dim
View(dados.agrupados)
clust <- cutree(fit, k = 3)
fviz_cluster(list(data = dados.padronizados, cluster = clust))
kmedia$cluster
kmedia=kmeans(dados.padronizados, 3) # 5 cluster solution
kmedia$centers
kmedia$size
kmedia$iter
aggregate(dados.padronizados,by=list(kmedia$cluster),FUN=mean)
# append cluster assignment
#crimespad=data.frame(crimespad, kmedia$cluster)
kmeans=data.frame(wine, kmedia$cluster)
kmeans[kmeans$V1 != kmeans$kmedia.cluster,] %>% dim
kmedia$cluster
fviz_cluster(list(data = dados.padronizados, cluster = kmedia$cluster))
View(kmeans)
fuzz=fanny(dados.padronizados, 3,memb.exp=1.5)
summary(fuzz)
plot(fuzz)
#stab <- stability(fuzz, graph = FALSE,B = 10)
si=fuzz$silinfo
#stab <- stability(fuzz, graph = FALSE,B = 10)
si=fuzz$silinfo
si
fuzz$clustering
fviz_cluster(list(data = dados.padronizados, cluster = fuzz$clustering))
fviz_cluster(list(data = dados.padronizados, cluster = wine$V1))
cmeans=data.frame(wine, fuzz$clustering)
View(cmeans)
cmeans[kmeans$V1 != kmeans$fuzz.clustering,] %>% dim
cmeans[cmeans$V1 != cmeans$fuzz.clustering,] %>% dim
fviz_cluster(list(data = dados.padronizados, cluster = fuzz$clustering))
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA)
library(ggplot2)
library(ggpubr)
library(DT)
library(mclust)
library(factoextra)
library(glue)
library(cluster)
library(fpc)
library(ape)
library(purrr)
library(mclust)
wine <- read.csv("wine.data", header = FALSE)
dados <- wine[,-1]
dados.padronizados <- scale(dados)
datatable(dados, caption = "Base de dados")
boxplot(dados,col="magenta")
boxplot(dados.padronizados,col="blue")
knitr::kable(summary(dados))
knitr::kable(cov(dados), digits = 2, caption = "Matriz de variância e covariância")
knitr::kable(cor(dados), digits = 2, caption = "Matriz de correlação")
plot(dados, col="red")
d11=dist(dados, method = "euclidean") # matriz de distancias
m=as.matrix(d11)
# print(d11)
#print(m,digits=2)
m %>% DT::datatable(caption = "Matriz de distância euclidiana")
#knitr::kable(m, caption = "Matriz de distância euclidiana")
# Visulizando as distância entre os objetos
# vermelho - perto, azul - longe, branco -
fviz_dist(d11,order=TRUE)
d1=dist(dados.padronizados, method = "euclidean")
m1=as.matrix(d1)
#print(m2,digits=2)
m1 %>% DT::datatable(caption = "Matriz de distância euclidiana - dados padronizados")
fviz_dist(d1,order=TRUE)
d2=dist(dados.padronizados, method = "manhattan")
m2=as.matrix(d2)
m2 %>% DT::datatable(caption = "Matriz de distância de Manhattan - dados padronizados")
#print(m2,digits=2)
fviz_dist(d2,order=TRUE)
d3=dist(dados.padronizados, method = "minkowski")
m3=as.matrix(d3)
m3 %>% DT::datatable(caption = "Matriz de distância de Minkowski - dados padronizados")
#print(m3,digits=2)
fviz_dist(d3,order=TRUE)
fit <- hclust(d1, method="ward.D")  # method pode ser "ward.D", "ward.D2", "single", #"complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).
#names(fit)
#fit$labels[fit$order]
# agnes {cluster} - Computes agglomerative hierarchical clustering of the dataset.
#par(mfrow = c(1, 2));
#plot(fit, hang = 0.1,cex = 0.6);
#plot(fit, hang = -1,col="red",cex = 0.6)
#plot(fit,col="blue",cex = 0.6)
#groups <- cutree(fit, k=4) # linha de corte k
#rect.hclust(fit, k=4, border="red")# retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
groups <- cutree(fit, k=2) # linha de corte k
rect.hclust(fit, k=2, border="red") # retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
groups <- cutree(fit, k=3) # linha de corte k
rect.hclust(fit, k=3, border="red") # retangulo mostrando os clusters
plot(fit, hang = 0.1,cex = 0.6);
groups <- cutree(fit, k=4) # linha de corte k
rect.hclust(fit, k=4, border="red") # retangulo mostrando os clusters
#wss <- sapply(1:13, function(k){kmeans(dados.padronizados, centers = k)$tot.withinss})
#k <- 3
#modelo <- kmeans(dados.padronizados, centers = k)
#fviz_nbclust(dados.padronizados, kmeans, method = "wss")+
#  geom_vline(xintercept = 3, linetype = 2)
mycl <- cutree(fit, k=3)
dados.agrupados <- data.frame(wine, cluster = mycl)
diff.h <- dados.agrupados[dados.agrupados$V1 != dados.agrupados$cluster,] %>% dim
clust <- cutree(fit, k = 3)
fviz_cluster(list(data = dados.padronizados, cluster = clust))
fviz_nbclust(dados.padronizados, kmeans, method = "silhouette")+
theme_classic()
fviz_nbclust(dados.padronizados, kmeans, method = "wss")+
theme_classic()
fviz_nbclust(dados.padronizados, kmeans, method = "gap_stat")+
theme_classic()
k <- 3
kmedia <- kmeans(dados.padronizados, k)
#kmedia$centers
#kmedia$size
#kmedia$iter
aggregate(dados.padronizados,by <- list(kmedia$cluster),FUN=mean)
kmeans <- data.frame(wine, cluster = kmedia$cluster)
diff.kmeans <- kmeans[kmeans$V1 != kmeans$cluster,] %>% dim
fviz_cluster(list(data = dados.padronizados, cluster = kmedia$cluster))
fviz_nbclust(dados.padronizados, fanny, method = "silhouette")+
theme_classic()
fviz_nbclust(dados.padronizados, fanny, method = "wss")+
theme_classic()
fviz_nbclust(dados.padronizados, fanny, method = "gap_stat")+
theme_classic()
fuzz <- fanny(dados.padronizados,2,memb.exp=1.5)
si <- fuzz$silinfo
cmeans <- data.frame(wine, cluster = fuzz$clustering)
diff.cmeans <- cmeans[cmeans$V1 != cmeans$cluster,] %>% dim
fviz_cluster(list(data = dados.padronizados, cluster = fuzz$clustering))
fuzz$convergence
fuzz$convergence
fuzz$convergence[1]
fuzz$clustering
si
View(kmeans)
aggregate(dados.padronizados,by <- list(kmedia$cluster),FUN=mean)
kmedia$cluster
kmedia <- kmeans(dados.padronizados, 3)
#aggregate(dados.padronizados,by <- list(kmedia$cluster),FUN=mean)
kmeans <- data.frame(wine, cluster = kmedia$cluster)
diff.kmeans <- kmeans[kmeans$V1 != kmeans$cluster,] %>% dim
diff.kmeans
kmedia <- kmeans(dados.padronizados, 3)
#aggregate(dados.padronizados,by <- list(kmedia$cluster),FUN=mean)
kmeans <- data.frame(wine, cluster = kmedia$cluster)
diff.kmeans <- kmeans[kmeans$V1 != kmeans$cluster,] %>% dim
diff.kmeans
